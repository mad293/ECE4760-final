The IMU we purchased has two ways to communcate with it, SPI and I^2C. Both would have worked, but we choose i2c even though it is more complex to program because it required less wires between the MCU and IMU. Since the IMU is going to be on a glove we decided that the solution with less hardware would be better. Since the IMU is two SPI and two I2c devices SPI would have required 5 wires between the IMU and the MCU whereas i2c only requires 3 wires. i2c is much more complex protocol in terms of sending and reading the bytes between the devices. It requires addresses for the slave devices. Luckily the AVR MCU we are using has built in i2c hardware (technically two-wire interface, which is a compatable protocl). Once we had i2c working we had to work with setting up the actual communication protocol with the IMU. This IMU has many features such as a FIFO buffer, and adjustable scale and data refresh rate. To control which scales and rates are used there are registers within the chip we have to write the correct parameters to. These registers are the input/ ouput scheme for all the data in the IMU. Each of the sensors has 6 data registers that are used to read from to find out the values being read on the sensor. Each axis has 16 bits of data precisison. If we use the accelometer for example, the minumum scale we can set is plus or minus 2Gs so we can have a resolution of 4 /2^16 or 2^-12 ~= .061 mG per LSB. This is a very accurate meausrement and plenty for our application. MIDI and human ears are nowhere near as precise as that.


